# Generated by Django 5.1.1 on 2025-10-09 10:09

from django.db import migrations


def remove_duplicate_container_clients(apps, schema_editor):
    """
    Remove duplicate CargoItem entries where the same container and client combination exists multiple times.
    Keep the most recent one (by created_at or id) and delete the rest.
    """
    CargoItem = apps.get_model('cargo', 'CargoItem')
    
    # Get all container-client combinations that have duplicates
    from django.db.models import Count
    duplicates = CargoItem.objects.values('container_id', 'client_id').annotate(
        count=Count('id')
    ).filter(count__gt=1)
    
    deleted_count = 0
    for dup in duplicates:
        container_id = dup['container_id']
        client_id = dup['client_id']
        
        # Get all items for this container-client combination
        items = CargoItem.objects.filter(
            container_id=container_id, 
            client_id=client_id
        ).order_by('-created_at', '-id')  # Keep the most recent
        
        # Delete all except the first one (most recent)
        items_to_delete = items[1:]
        for item in items_to_delete:
            item.delete()
            deleted_count += 1
    
    if deleted_count > 0:
        print(f"Removed {deleted_count} duplicate container-client entries")


def reverse_migration(apps, schema_editor):
    # No reverse operation needed - we can't restore deleted duplicates
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('cargo', '0012_remove_cargoitem_unique_container_client_tracking_and_more'),
    ]

    operations = [
        migrations.RunPython(remove_duplicate_container_clients, reverse_migration),
    ]
